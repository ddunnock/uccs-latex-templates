# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  Makefile â€“ UCCS LaTeX coursework toolchain
#  v2 â€¢ 2025-06-27 â€¢ ChatGPT-assisted refinement
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#
#  Requirements
#  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#    â€¢ tectonic  â€“ preferred zero-config LaTeX engine
#         -or-
#    â€¢ latexmk   â€“ fallback engine (watch mode, etc.)
#    â€¢ bash      â€“ every recipe uses bash-isms
#
#  Key targets (also shown by `make help`)
#  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#    pdf         make pdf FILE=<tex>      â†’ compile one document
#    all         make all                 â†’ compile every .tex in classes/
#    watch       make watch FILE=<tex>    â†’ live-reload (latexmk only)
#    clean       make clean               â†’ delete aux files
#    distclean   make distclean           â†’ clean + delete PDFs
#    newdoc      make newdoc [...]        â†’ scaffold homework/report
#    newhw       make newhw  [...]        â†’ shorthand wrapper for homework
#    newreport   make newreport [...]     â†’ shorthand wrapper for report
#
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

SHELL := /usr/bin/env bash        # single point of truth for all recipes

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  0.  Engine auto-detection
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ENGINE  	:= $(shell command -v tectonic 2>/dev/null || \
					 					 command -v xelatex 2>/dev/null || \
										 command -v latexmk 2>/dev/null)

ENGINEF := $(notdir $(ENGINE))

ifeq ($(ENGINEF),xelatex)
	COMPILE = xelatex -interaction=nonstopmode -synctex=1 -shell-escape $1
else ifeq ($(ENGINEF),tectonic)
	COMPILE = tectonic -X compile --synctec -Z shell-escape $1
else
	COMPILE = latexmk -xelatex -shell-escape -interaction=nonstopmode $1
endif

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  1.  Compiler abstraction
#      $(call COMPILE,<file.tex>)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ifeq ($(ENGINEF),tectonic)
  COMPILE = tectonic -X compile --synctex -Z shell-escape "$1"
else
  COMPILE = latexmk -pdf -shell-escape -interaction=nonstopmode "$1"
endif

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  2.  Self-documenting help
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.PHONY: help
help: ## Print every documented target
	@grep -E '^[a-zA-Z_-]+:.*?##' $(firstword $(MAKEFILE_LIST)) | \
	  awk 'BEGIN {FS=":.*?##"} {printf "  \033[1m%-12s\033[0m %s\n", $$1, $$2}'

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  3.  Single-file compile
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.PHONY: pdf
pdf: ## Compile one .tex file â†’ PDF (usage: make pdf FILE=path/to/doc.tex)
ifndef FILE
	$(error Usage: make pdf FILE=classes/<course>/<term>/<name>.tex)
endif
	@$(call COMPILE,$(FILE))
	@# Optional â€“ open the resulting PDF (macOS: `open`, Linux: `xdg-open`)
	@pdf="$${FILE%.tex}.pdf"; \
	if   command -v open      >/dev/null 2>&1; then open     "$$pdf"; \
	elif command -v xdg-open  >/dev/null 2>&1; then xdg-open "$$pdf"; fi

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  4.  Compile everything
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.PHONY: all
all: ## Recursively compile every .tex under classes/
	@echo 'ðŸ”„  Building ALL coursework PDFsâ€¦'
	@find classes -type f -name '*.tex' -print0 | \
	  while IFS= read -r -d '' f; do \
	    echo "â€”â€” $$f"; \
	    $(call COMPILE,$$f) || exit 1; \
	  done
	@echo 'âœ…  All documents compiled.'

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  5.  Continuous watch (latexmk only)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.PHONY: watch
watch: ## Live-reload compilation (requires latexmk)
ifeq ($(ENGINEF),tectonic)
	$(error watch target requires latexmk in PATH)
endif
ifndef FILE
	$(error Usage: make watch FILE=path/to/doc.tex)
endif
	@latexmk -pdf -pvc -shell-escape -interaction=nonstopmode "$(FILE)"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  6.  Clean artefacts
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.PHONY: clean
clean: ## Delete auxiliary build artefacts (keeps PDFs)
	@echo 'ðŸ§¹  Cleaning auxiliary filesâ€¦'
	@find . \( -name '*.aux'  -o -name '*.fdb_latexmk' -o -name '*.fls' \
	           -o -name '*.log' -o -name '*.synctex.gz' -o -name '*.out' \
	           -o -name '*.bbl' -o -name '*.blg' -o -name '*.bcf' \
	           -o -name '*.run.xml' \) -delete
	@echo 'âœ…  Clean done.'

.PHONY: distclean
distclean: clean ## Clean + delete generated PDFs
	@echo 'ðŸ§¹  Removing PDFsâ€¦'
	@find classes -type f -name '*.pdf' -delete
	@echo 'âœ…  distclean done.'

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  7.  Template scaffolding
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.PHONY: newdoc
newdoc: ## Interactive homework/report scaffold (vars: TYPE CLASS ACAD_TERM MODULE_NUM ASSIGN_TITLE STUDENT INSTRUCTOR)
	@# Forward Make-vars into the environment; missing ones trigger prompts.
	@env TYPE="$(TYPE)" CLASS="$(CLASS)" ACAD_TERM="$(ACAD_TERM)" MODULE_NUM="$(MODULE_NUM)" ASSIGN_TITLE="$(ASSIGN_TITLE)" \
	     STUDENT="$(STUDENT)" INSTRUCTOR="$(INSTRUCTOR)" \
	     bash scripts/newdoc.sh

.PHONY: newhw
newhw: ## Wrapper â€“ homework scaffold
	$(MAKE) newdoc TYPE=homework $(filter-out TYPE=%,$(MAKECMDGOALS))

.PHONY: newreport
newreport: ## Wrapper â€“ report scaffold
	$(MAKE) newdoc TYPE=report   $(filter-out TYPE=%,$(MAKECMDGOALS))

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#  8.  Default target
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
.DEFAULT_GOAL := help
